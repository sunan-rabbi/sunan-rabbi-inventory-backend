generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        String     @id @default(uuid())
  number    String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(PENDING)
  OTP       Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  admin         Admin?
  customer      Customer?
  ForgetRequest ForgetRequest[]

  @@map("users")
}

model ForgetRequest {
  id        String   @id @default(uuid())
  number    String
  OTP       Int
  flag      String?
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userID String
  user   User?  @relation(fields: [userID], references: [id])

  @@map("forget_requests")
}

model Admin {
  id        String   @id @default(uuid())
  userID    String   @unique
  user      User     @relation(fields: [userID], references: [id])
  name      String
  image     String?
  number    String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Customer {
  id        String   @id @default(uuid())
  userID    String   @unique
  user      User     @relation(fields: [userID], references: [id])
  name      String
  image     String?
  number    String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shops Shop[]

  @@map("customers")
}

model Shop {
  id        String   @id @default(uuid())
  shopName  String
  ownerID   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner Customer @relation(fields: [ownerID], references: [id])

  productAmounts ProductAmount[]
  Checkout       Checkout[]

  @@map("shops")
}

model Inventory {
  id            String   @id @default(uuid())
  productName   String
  barcode       String
  measuringUnit String
  buyPrice      Float
  sellPrice     Float
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  productAmounts ProductAmount[]
  CheckoutItem   CheckoutItem[]

  @@map("inventory")
}

model ProductAmount {
  id        String   @id @default(uuid())
  productID String
  shopID    String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Inventory @relation(fields: [productID], references: [id])
  shop    Shop      @relation(fields: [shopID], references: [id])

  @@unique([productID, shopID])
  @@map("product_amounts")
}

model Checkout {
  id     String @id @default(uuid())
  shopID String
  shop   Shop   @relation(fields: [shopID], references: [id])

  totalPrice    Float
  totalQuantity Int

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  items     CheckoutItem[]

  @@map("checkouts")
}

model CheckoutItem {
  id String @id @default(uuid())

  checkoutID String
  checkout   Checkout @relation(fields: [checkoutID], references: [id])

  productID String
  product   Inventory @relation(fields: [productID], references: [id])

  productName String

  unitPrice Float

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("checkout_items")
}
